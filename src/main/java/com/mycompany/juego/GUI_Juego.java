/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.mycompany.juego;
//cambio en la el manejo de tiempo de espera

import java.awt.Color;
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.OutputStream;
import java.net.HttpURLConnection;
import java.net.MalformedURLException;
import java.net.SocketTimeoutException;
import java.net.URL;
import java.nio.charset.StandardCharsets;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import org.json.JSONObject;

/**
 *
 * @author migue
 */
public class GUI_Juego extends javax.swing.JFrame {

    String nombremodelo = "gemma2:2b";
    private int[][] tablero = new int[10][10]; // Matriz lógica para almacenar tesoros, trampas y casillas vacías
    private int row = 0; // Posición actual del jugador (fila)
    private int column = 0; // Posición actual del jugador (columna)
    private int ct = 0; // Contador de tesoros encontrados
    private int punt = 0; // Puntuación actual
// Puntuación actual

    public GUI_Juego() {
        initComponents();
        // Configurar la tabla matriz2
        matriz2.setModel(new javax.swing.table.DefaultTableModel(
                new Object[10][10], // 10x10 tablero
                new String[]{"", "", "", "", "", "", "", "", "", ""} // Columnas vacías
        ) {
            Class[] types = new Class[]{
                String.class, String.class, String.class, String.class, String.class,
                String.class, String.class, String.class, String.class, String.class
            };
            boolean[] canEdit = new boolean[]{
                false, false, false, false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types[columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit[columnIndex];
            }
        });

        // Llenar la tabla lógica y configurar el tablero
        llenar(tablero, 10, 10);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btn_prompt = new javax.swing.JButton();
        exit = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        output = new javax.swing.JTextArea();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        matriz = new javax.swing.JTable();
        jLabel3 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        tesoros = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        puntaje_actual = new javax.swing.JTextField();
        nombretxt = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        rowtxt = new javax.swing.JTextField();
        columntxt = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        down = new javax.swing.JButton();
        left = new javax.swing.JButton();
        up = new javax.swing.JButton();
        right = new javax.swing.JButton();
        jScrollPane5 = new javax.swing.JScrollPane();
        matriz2 = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setPreferredSize(new java.awt.Dimension(747, 458));

        btn_prompt.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pista.png"))); // NOI18N
        btn_prompt.setText("Pedir pista");
        btn_prompt.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btn_promptMouseClicked(evt);
            }
        });

        exit.setIcon(new javax.swing.ImageIcon(getClass().getResource("/close.png"))); // NOI18N
        exit.setText("Salir");
        exit.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                exitMouseClicked(evt);
            }
        });

        output.setColumns(20);
        output.setRows(5);
        jScrollPane1.setViewportView(output);

        jLabel2.setFont(new java.awt.Font("Segoe UI", 0, 36)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(204, 204, 0));
        jLabel2.setText("Treasure Finder");

        jScrollPane2.setBackground(new java.awt.Color(255, 204, 0));
        jScrollPane2.setForeground(new java.awt.Color(255, 204, 0));

        matriz.setBackground(new java.awt.Color(51, 51, 255));
        matriz.setBorder(new javax.swing.border.MatteBorder(null));
        matriz.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        matriz.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "", "", "", "", "", "", "", "", "", ""
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Integer.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        matriz.setAutoscrolls(false);
        matriz.setUpdateSelectionOnSort(false);
        matriz.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                matrizMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(matriz);
        if (matriz.getColumnModel().getColumnCount() > 0) {
            matriz.getColumnModel().getColumn(0).setResizable(false);
            matriz.getColumnModel().getColumn(1).setResizable(false);
            matriz.getColumnModel().getColumn(2).setResizable(false);
            matriz.getColumnModel().getColumn(3).setResizable(false);
            matriz.getColumnModel().getColumn(4).setResizable(false);
            matriz.getColumnModel().getColumn(5).setResizable(false);
            matriz.getColumnModel().getColumn(6).setResizable(false);
            matriz.getColumnModel().getColumn(7).setResizable(false);
            matriz.getColumnModel().getColumn(8).setResizable(false);
            matriz.getColumnModel().getColumn(9).setResizable(false);
        }

        jLabel3.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(153, 102, 0));
        jLabel3.setText("Casillas de tesoros");

        jPanel1.setBackground(new java.awt.Color(255, 255, 204));
        jPanel1.setForeground(new java.awt.Color(255, 255, 204));

        jLabel4.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(153, 0, 0));
        jLabel4.setText("Estadisticas de");

        jLabel5.setForeground(new java.awt.Color(0, 0, 0));
        jLabel5.setText("Tesoros encontrados:");

        tesoros.setEditable(false);
        tesoros.setBackground(new java.awt.Color(255, 255, 255));
        tesoros.setForeground(new java.awt.Color(0, 0, 0));

        jLabel6.setForeground(new java.awt.Color(0, 0, 0));
        jLabel6.setText("Tu puntaje actual:");

        puntaje_actual.setEditable(false);
        puntaje_actual.setBackground(new java.awt.Color(255, 255, 255));
        puntaje_actual.setForeground(new java.awt.Color(0, 0, 0));
        puntaje_actual.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                puntaje_actualActionPerformed(evt);
            }
        });

        nombretxt.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        nombretxt.setForeground(new java.awt.Color(153, 0, 0));
        nombretxt.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        nombretxt.setText("BEBE");

        jLabel1.setForeground(new java.awt.Color(0, 0, 0));
        jLabel1.setText("Posición actual:");

        rowtxt.setEditable(false);
        rowtxt.setBackground(new java.awt.Color(255, 255, 255));
        rowtxt.setForeground(new java.awt.Color(0, 0, 0));
        rowtxt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rowtxtActionPerformed(evt);
            }
        });

        columntxt.setEditable(false);
        columntxt.setBackground(new java.awt.Color(255, 255, 255));
        columntxt.setForeground(new java.awt.Color(0, 0, 0));

        jLabel7.setBackground(new java.awt.Color(0, 0, 0));
        jLabel7.setForeground(new java.awt.Color(0, 0, 0));
        jLabel7.setText("X:");

        jLabel8.setForeground(new java.awt.Color(0, 0, 0));
        jLabel8.setText("Y:");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(tesoros, javax.swing.GroupLayout.PREFERRED_SIZE, 129, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(21, 21, 21)
                                .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(27, 27, 27)
                                .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(puntaje_actual)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel7)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                            .addComponent(jLabel5)
                                            .addGap(9, 9, 9))
                                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                            .addComponent(jLabel1)
                                            .addGap(23, 23, 23)))
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                        .addComponent(rowtxt, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(jLabel8)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(columntxt, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)))))))
                .addContainerGap())
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(50, 50, 50)
                .addComponent(nombretxt)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(12, 12, 12)
                .addComponent(jLabel4)
                .addGap(18, 18, 18)
                .addComponent(nombretxt)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel5)
                .addGap(18, 18, 18)
                .addComponent(tesoros, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jLabel6)
                .addGap(18, 18, 18)
                .addComponent(puntaje_actual, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(rowtxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(columntxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel7)
                    .addComponent(jLabel8))
                .addContainerGap(68, Short.MAX_VALUE))
        );

        down.setText("Down");
        down.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                downMouseClicked(evt);
            }
        });

        left.setText("Left");
        left.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                leftMouseClicked(evt);
            }
        });
        left.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                leftActionPerformed(evt);
            }
        });

        up.setText("Up");
        up.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                upMouseClicked(evt);
            }
        });

        right.setText("Right");
        right.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                rightMouseClicked(evt);
            }
        });
        right.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rightActionPerformed(evt);
            }
        });

        jScrollPane5.setBackground(new java.awt.Color(255, 204, 0));
        jScrollPane5.setForeground(new java.awt.Color(255, 204, 0));

        matriz2.setBackground(new java.awt.Color(255, 255, 51));
        matriz2.setBorder(new javax.swing.border.MatteBorder(null));
        matriz2.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        matriz2.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "", "", "", "", "", "", "", "", "", ""
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Integer.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        matriz2.setAutoscrolls(false);
        matriz2.setUpdateSelectionOnSort(false);
        matriz2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                matriz2MouseClicked(evt);
            }
        });
        jScrollPane5.setViewportView(matriz2);
        if (matriz2.getColumnModel().getColumnCount() > 0) {
            matriz2.getColumnModel().getColumn(0).setResizable(false);
            matriz2.getColumnModel().getColumn(1).setResizable(false);
            matriz2.getColumnModel().getColumn(2).setResizable(false);
            matriz2.getColumnModel().getColumn(3).setResizable(false);
            matriz2.getColumnModel().getColumn(4).setResizable(false);
            matriz2.getColumnModel().getColumn(5).setResizable(false);
            matriz2.getColumnModel().getColumn(6).setResizable(false);
            matriz2.getColumnModel().getColumn(7).setResizable(false);
            matriz2.getColumnModel().getColumn(8).setResizable(false);
            matriz2.getColumnModel().getColumn(9).setResizable(false);
        }

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(btn_prompt, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jScrollPane1)
                        .addGap(66, 66, 66)
                        .addComponent(exit, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(36, 36, 36)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 572, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 376, Short.MAX_VALUE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addComponent(jLabel2)
                                .addGap(127, 127, 127))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 252, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(left, javax.swing.GroupLayout.PREFERRED_SIZE, 82, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(8, 8, 8)
                                        .addComponent(down, javax.swing.GroupLayout.PREFERRED_SIZE, 82, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(up, javax.swing.GroupLayout.PREFERRED_SIZE, 82, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(18, 18, 18)
                                .addComponent(right, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(131, 131, 131)))
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(24, 24, 24))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(54, 54, 54)
                                        .addComponent(jLabel3))
                                    .addComponent(jLabel2))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 0, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 211, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(up, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(47, 47, 47)
                                .addComponent(down, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(right, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(left, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(46, 46, 46)))
                        .addGap(17, 17, 17))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(45, 45, 45)
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(81, 81, 81)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btn_prompt, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(exit, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(40, Short.MAX_VALUE))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void exitMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_exitMouseClicked
        this.dispose();
        JOptionPane.showMessageDialog(null, "Gracias por jugar!", "Salida", JOptionPane.CLOSED_OPTION);

    }//GEN-LAST:event_exitMouseClicked

    private void puntaje_actualActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_puntaje_actualActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_puntaje_actualActionPerformed

    private void leftActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_leftActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_leftActionPerformed

    private void rightActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rightActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_rightActionPerformed

    private void matrizMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_matrizMouseClicked
        int row = matriz.rowAtPoint(evt.getPoint());
        int column = matriz.columnAtPoint(evt.getPoint());
        System.out.println("Clic en la celda: (" + row + ", " + column + ")");
        JOptionPane.showMessageDialog(GUI_Juego.this,
                "Posición seleccionada: Fila = " + row + ", Columna = " + column,
                "Posición de la Casilla",
                JOptionPane.INFORMATION_MESSAGE);
        //esto es para verificar el contenido de las celdas, se quita en la version final  
        //Object valor = matriz.getValueAt(row, column);
        //System.out.println("Valor " +valor);

    }//GEN-LAST:event_matrizMouseClicked

    private void upMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_upMouseClicked
        moverJugador(-1, 0);
    }//GEN-LAST:event_upMouseClicked

    private void downMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_downMouseClicked
        moverJugador(1, 0);
    }//GEN-LAST:event_downMouseClicked

    private void leftMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_leftMouseClicked
        moverJugador(0, -1);
    }//GEN-LAST:event_leftMouseClicked

    private void rightMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_rightMouseClicked
        moverJugador(0, 1);

    }//GEN-LAST:event_rightMouseClicked

    private void rowtxtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rowtxtActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_rowtxtActionPerformed

    private void btn_promptMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btn_promptMouseClicked

        // Construir el mensaje para solicitar pistas
    String promptText = "¿Dónde están los tesoros? Por favor, indícame las posiciones.";

    // Llamar a la API con el tablero
    String respuesta = ollama(nombremodelo, promptText, tablero);

    // Mostrar la respuesta en el cuadro de texto de salida
    output.append("API: " + respuesta + "\n");

    // Llamar al método para procesar las pistas y actualizarlas en el tablero
    procesarPistas(respuesta);
    }//GEN-LAST:event_btn_promptMouseClicked

    private void matriz2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_matriz2MouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_matriz2MouseClicked

    public void llenar(int[][] m, int nf, int nc) {
        DefaultTableModel model = (DefaultTableModel) matriz2.getModel();

        for (int i = 0; i < nf; i++) {
            for (int j = 0; j < nc; j++) {
                double random = Math.random();
                if (random <= 0.50) {
                    m[i][j] = 1; // Casilla vacía
                } else if (random > 0.50 && random <= 0.75) {
                    m[i][j] = 2; // Tesoro
                } else {
                    m[i][j] = 3; // Trampa
                }
                // Inicialmente, dejamos las celdas vacías visualmente
                model.setValueAt(" ", i, j);
            }
        }

        // Colocar al jugador en la posición inicial
        m[0][0] = 1; // Casilla inicial vacía
        model.setValueAt("P", 0, 0); // Mostrar al jugador en la posición inicial
        matriz2.repaint(); // Refrescar la tabla
    }

    //funcion para mover el jugador y calular puntajes
    private void moverJugador(int dRow, int dColumn) {
        DefaultTableModel model = (DefaultTableModel) matriz2.getModel();

        int newRow = row + dRow;
        int newColumn = column + dColumn;

        // Verificar límites
        if (newRow >= 0 && newRow < matriz2.getRowCount() && newColumn >= 0 && newColumn < matriz2.getColumnCount()) {
            // Marcar la posición anterior como visitada si no era un tesoro o trampa
            int previousValue = tablero[row][column];
            if (previousValue == 1) {
                model.setValueAt(".", row, column); // Marcar como visitada
            }

            // Actualizar posición del jugador
            row = newRow;
            column = newColumn;

            // Obtener el valor lógico de la nueva celda en la matriz `tablero`
            int cellValue = tablero[row][column];

            // Procesar según el valor lógico
            if (cellValue == 2) { // Tesoro
                ct++; // Incrementar tesoros encontrados
                punt += 500; // Sumar puntos
                model.setValueAt("X", row, column); // Marcar como tesoro encontrado
                JOptionPane.showMessageDialog(null, "¡Encontró un tesoro!", "Alerta", JOptionPane.CLOSED_OPTION);
            } else if (cellValue == 3) { // Trampa
                punt -= 200; // Penalización por trampa
                model.setValueAt("T", row, column); // Marcar como trampa encontrada
                JOptionPane.showMessageDialog(null, "¡Cuidado, pisó una trampa!", "Alerta", JOptionPane.CLOSED_OPTION);
            } else {
                // Casilla vacía, colocar al jugador
                model.setValueAt("P", row, column);
            }

            // Actualizar la celda lógica en el tablero después de interactuar
            tablero[row][column] = 1;

            // Actualizar estadísticas en la interfaz
            tesoros.setText(String.valueOf(ct));
            puntaje_actual.setText(String.valueOf(punt));
            rowtxt.setText(String.valueOf(row));
            columntxt.setText(String.valueOf(column));

            // Refrescar la tabla para asegurarse de que se reflejen los cambios
            matriz2.repaint();
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(GUI_Juego.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(GUI_Juego.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(GUI_Juego.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(GUI_Juego.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new GUI_Juego().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btn_prompt;
    private javax.swing.JTextField columntxt;
    private javax.swing.JButton down;
    private javax.swing.JButton exit;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JButton left;
    private javax.swing.JTable matriz;
    private javax.swing.JTable matriz2;
    private javax.swing.JLabel nombretxt;
    private javax.swing.JTextArea output;
    private javax.swing.JTextField puntaje_actual;
    private javax.swing.JButton right;
    private javax.swing.JTextField rowtxt;
    private javax.swing.JTextField tesoros;
    private javax.swing.JButton up;
    // End of variables declaration//GEN-END:variables

    public static String ollama(String nombremodelo, String promptText, int[][] tablero) {
        double inicio = System.currentTimeMillis(); // Marca de tiempo de inicio
        try {
            URL url = new URL("http://localhost:11434/api/generate");
            HttpURLConnection conn = (HttpURLConnection) url.openConnection();
            conn.setRequestMethod("POST");
            conn.setRequestProperty("Content-Type", "application/json; utf-8");
            conn.setRequestProperty("Accept", "application/json");
            conn.setDoOutput(true);

            // Serializar el tablero a formato JSON
            StringBuilder tableroString = new StringBuilder();
            tableroString.append("[");
            for (int i = 0; i < tablero.length; i++) {
                tableroString.append("[");
                for (int j = 0; j < tablero[i].length; j++) {
                    tableroString.append(tablero[i][j]);
                    if (j < tablero[i].length - 1) {
                        tableroString.append(",");
                    }
                }
                tableroString.append("]");
                if (i < tablero.length - 1) {
                    tableroString.append(",");
                }
            }
            tableroString.append("]");

            // Construir el mensaje para la API
            String jsonInputString = String.format(
                    "{\"model\": \"%s\", \"prompt\": \"Tablero del juego: %s. %s\", \"stream\": false}",
                    nombremodelo, tableroString.toString(), promptText);

            // Enviar la solicitud
            try (OutputStream os = conn.getOutputStream()) {
                byte[] input = jsonInputString.getBytes(StandardCharsets.UTF_8);
                os.write(input, 0, input.length);
            }

            int code = conn.getResponseCode();
            String errorMessage = errorHandler(code);
            if (errorMessage != null) {
                return errorMessage;
            } else {
                BufferedReader in = new BufferedReader(
                        new InputStreamReader(conn.getInputStream(), StandardCharsets.UTF_8));
                StringBuilder response = new StringBuilder();
                String line;
                while ((line = in.readLine()) != null) {
                    response.append(line);
                }
                in.close();

                JSONObject jsonResponse = new JSONObject(response.toString());
                String responseText = jsonResponse.getString("response");

                return "Exitoso: " + responseText;
            }
        } catch (SocketTimeoutException e) {
            return "Error: Tiempo de espera de conexión o lectura excedido";
        } catch (MalformedURLException e) {
            return "La URL es inválida: " + e.getMessage();
        } catch (IOException e) {
            return "Error de conexión: " + e.getMessage();
        }
    }

    private static String errorHandler(int code) {
        switch (code) {
            case 400:
                return "Error 400: Solicitud incorrecta. No terminar o empezar Prompt con tecla (Enter o Espacio).";
            case 401:
                return "Error 401: No autorizado. Verifica tus credenciales de autenticación.";
            case 403:
                return "Error 403: Prohibido. No tienes permiso para acceder a este recurso.";
            case 404:
                return "Error 404: El recurso solicitado no fue encontrado. Verifica el endpoint y el servidor.";
            case 500:
                return "Error 500: Error interno del servidor. Intenta nuevamente más tarde.";
            case 503:
                return "Error 503: Servicio no disponible. El servidor podría estar en mantenimiento.";
            default:
                return null;
        }
    }

    private void procesarPistas(String respuesta) {
        // Buscar las coordenadas en la respuesta
        Pattern pattern = Pattern.compile("\\[(\\d+),(\\d+)\\]");
        Matcher matcher = pattern.matcher(respuesta);

        while (matcher.find()) {
            int fila = Integer.parseInt(matcher.group(1));
            int columna = Integer.parseInt(matcher.group(2));

            // Marcar la celda con una pista (por ejemplo, "?")
            DefaultTableModel model = (DefaultTableModel) matriz2.getModel();
            model.setValueAt("?", fila, columna);
        }

        // Refrescar la tabla
        matriz2.repaint();
    }

//llave que cierra todo
}
